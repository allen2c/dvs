import functools
import pathlib
import typing

import diskcache
import duckdb
import pydantic
import pydantic_settings

if typing.TYPE_CHECKING:
    import rich.console


class Settings(pydantic_settings.BaseSettings):
    """
    Settings for the DuckDB VSS API.
    """

    # DuckDB
    DUCKDB_PATH: typing.Optional[typing.Text] = pydantic.Field(
        default=None,
        description="The file path to the DuckDB database file containing document and embedding data.",  # noqa: E501
    )
    POINTS_TABLE_NAME: typing.Text = pydantic.Field(
        default="points",
        description="The name of the table in DuckDB that stores the vector embeddings and related point data.",  # noqa: E501
    )
    DOCUMENTS_TABLE_NAME: typing.Text = pydantic.Field(
        default="documents",
        description="The name of the table in DuckDB that stores the document metadata.",  # noqa: E501
    )
    EMBEDDING_MODEL: typing.Text = pydantic.Field(
        default="text-embedding-3-small",
        description="The name of the OpenAI embedding model to use for generating vector embeddings.",  # noqa: E501
    )
    EMBEDDING_DIMENSIONS: int = pydantic.Field(
        default=512,
        description="The number of dimensions in the vector embeddings generated by the chosen model.",  # noqa: E501
    )

    # Embeddings
    CACHE_PATH: typing.Text = pydantic.Field(
        default="./.cache/dvs.cache",
        description="The file path to the cache directory for storing computed embeddings.",  # noqa: E501
    )
    CACHE_SIZE_LIMIT: int = pydantic.Field(
        default=100 * 1024 * 1024,
        description="The maximum size of the embeddings cache in bytes. Default is 100MB.",  # noqa: E501
    )

    # Temporary directory
    TEMP_DIR: typing.Text = pydantic.Field(
        default=".dvs/",
        description="The directory where the application stores temporary files.",  # noqa: E501
    )

    @functools.cached_property
    def console(self) -> "rich.console.Console":
        import rich.console

        return rich.console.Console()

    @functools.cached_property
    def cache(self) -> diskcache.Cache:
        return diskcache.Cache(self.CACHE_PATH, size_limit=self.CACHE_SIZE_LIMIT)

    @functools.cached_property
    def temp_dir(self) -> pathlib.Path:
        _dir = pathlib.Path(self.TEMP_DIR)
        _dir.mkdir(parents=True, exist_ok=True)
        return _dir

    @property
    def duckdb_conn(self) -> duckdb.DuckDBPyConnection:
        if self.DUCKDB_PATH is None:
            raise ValueError("DUCKDB_PATH is not set")
        return duckdb.connect(self.DUCKDB_PATH)
