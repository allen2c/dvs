{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DVS - DuckDB Vector Similarity Search","text":"<p>A Python library for vector similarity search powered by DuckDB and OpenAI embeddings.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fast Vector Search: Efficient similarity search using DuckDB's vector capabilities</li> <li>OpenAI Integration: Automatic embedding generation with OpenAI models</li> <li>Caching: Built-in embedding cache for improved performance</li> <li>Simple API: Easy-to-use Python interface</li> <li>Flexible Storage: Store documents with metadata</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install dvs-py\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>import asyncio\nimport tempfile\nimport openai_embeddings_model as oai_emb_model\nfrom dvs import DVS\n\n# Initialize DVS with a database file and model\ndvs = DVS(\n    tempfile.NamedTemporaryFile(suffix=\".duckdb\").name,\n    model=\"text-embedding-3-small\",\n    model_settings=oai_emb_model.ModelSettings(dimensions=1536)\n)\n\n# Add documents\ndvs.add(\"Apple announced new iPhone features with upgraded camera and A16 chip.\")\ndvs.add(\"Microsoft updated Azure with enhanced AI tools and security features.\")\n\n# Search\nresults = asyncio.run(dvs.search(\"What are the new iPhone features?\"))\nprint(f\"Found {len(results)} results\")\nfor point, document, score in results:\n    print(f\"Score: {score:.3f} - {document.content[:100]}...\")\n</code></pre>"},{"location":"#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>import asyncio\nimport pathlib\nimport diskcache\nimport openai\nimport openai_embeddings_model as oai_emb_model\nfrom dvs import DVS\n\n# Configure with custom cache and model settings\ndvs = DVS(\n    \"./my_database.duckdb\",\n    model=oai_emb_model.OpenAIEmbeddingsModel(\n        model=\"text-embedding-3-small\",\n        openai_client=openai.OpenAI(),\n        cache=diskcache.Cache(\"./cache/embeddings.cache\"),\n    ),\n    model_settings=oai_emb_model.ModelSettings(dimensions=1536),\n    verbose=True\n)\n\n# Add documents with metadata\nfrom dvs.types.document import Document\n\ndoc = Document.from_content(\n    \"Latest developments in artificial intelligence...\",\n    name=\"AI Research Paper\",\n    metadata={\"author\": \"John Doe\", \"year\": 2024}\n)\ndvs.add(doc)\n\n# Search with more results\nresults = asyncio.run(dvs.search(\"artificial intelligence\", top_k=10))\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>Set your OpenAI API key:</p> <pre><code>export OPENAI_API_KEY=\"your-api-key\"\n</code></pre>"},{"location":"#document-management","title":"Document Management","text":""},{"location":"#adding-documents","title":"Adding Documents","text":"<pre><code># Add single document\ndvs.add(\"Your document content here\")\n\n# Add multiple documents\ndocuments = [\n    \"First document content\",\n    \"Second document content\",\n    \"Third document content\"\n]\ndvs.add(documents)\n\n# Add documents with metadata\nfrom dvs.types.document import Document\n\ndocs = [\n    Document.from_content(\"Content 1\", name=\"Doc 1\", metadata={\"category\": \"tech\"}),\n    Document.from_content(\"Content 2\", name=\"Doc 2\", metadata={\"category\": \"science\"})\n]\ndvs.add(docs)\n</code></pre>"},{"location":"#searching-documents","title":"Searching Documents","text":"<pre><code># Basic search\nresults = asyncio.run(dvs.search(\"your query\"))\n\n# Search with more results\nresults = asyncio.run(dvs.search(\"your query\", top_k=10))\n\n# Search with embeddings included\nresults = asyncio.run(dvs.search(\"your query\", with_embedding=True))\n</code></pre>"},{"location":"#removing-documents","title":"Removing Documents","text":"<pre><code># Get document ID from search results\nresults = asyncio.run(dvs.search(\"some query\"))\ndoc_id = results[0][1].document_id\n\n# Remove document\ndvs.remove(doc_id)\n\n# Remove multiple documents\ndvs.remove([doc_id1, doc_id2, doc_id3])\n</code></pre>"},{"location":"#development","title":"Development","text":"<p>Install development dependencies:</p> <pre><code>make install-all\n</code></pre> <p>Run tests:</p> <pre><code>make pytest\n</code></pre> <p>Format code:</p> <pre><code>make format-all\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"#support","title":"Support","text":"<p>If you encounter any issues or have questions, please open an issue on GitHub.</p>"}]}